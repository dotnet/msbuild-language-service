<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ShouldSignBuild Condition="'$(RunningInMicroBuild)' == 'true' AND '$(SignType)' == 'real'">true</ShouldSignBuild>
    <StrongNameCertificate Condition="'$(StrongNameCertificate)' == ''">MicrosoftShared</StrongNameCertificate>
    <BuildDirPath Condition="'$(BuildDirPath)'==''">$(MSBuildThisFileDirectory)\..\</BuildDirPath>
    <RoslynInternalKey>002400000480000094000000060200000024000052534131000400000100010055e0217eb635f69281051f9a823e0c7edd90f28063eb6c7a742a19b4f6139778ee0af438f47aed3b6e9f99838aa8dba689c7a71ddb860c96d923830b57bbd5cd6119406ddb9b002cf1c723bf272d6acbb7129e9d6dd5a5309c94e0ff4b2c884d45a55f475cd7dba59198086f61f5a8c8b5e601c0edbf269733f6f578fc8579c2</RoslynInternalKey>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(SignAssembly)' == 'true' AND '$(NonShipping)' != 'true'">
        <!-- Shipping binaries in an "official" build are delay-signed with the MS key; later, the signing
             system will finish the strong-name signing. -->
      <Choose>
        <!-- DelaySign if we're real signing, otherwise public sign -->
        <When Condition="'$(ShouldSignBuild)' == 'true'">
          <PropertyGroup>
          <DelaySign>true</DelaySign>
          <PublicSign>false</PublicSign>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
          <DelaySign>false</DelaySign>
          <PublicSign>true</PublicSign>
          </PropertyGroup>
        </Otherwise>
      </Choose>

      <PropertyGroup>
        <AssemblyOriginatorKeyFile>$(BuildDirPath)Strong Name Keys\35MSSharedLib1024.snk</AssemblyOriginatorKeyFile>
        <PublicKey>0024000004800000940000000602000000240000525341310004000001000100b5fc90e7027f67871e773a8fde8938c81dd402ba65b9201d60593e96c492651e889cc13f1415ebb53fac1131ae0bd333c5ee6021672d9718ea31a8aebd0da0072f25d87dba6fc90ffd598ed4da35e44c398c454307e8e33b8426143daec9f596836f97c8f74750e5975c64e2189f45def46b2a2b1247adc3652bf5c308055da9</PublicKey>
        <PublicKeyToken>31BF3856AD364E35</PublicKeyToken>
        <StrongNameCertificateFriendlyId>72</StrongNameCertificateFriendlyId>
      </PropertyGroup>
    </When>
  </Choose>

  <!-- Because https://github.com/dotnet/roslyn/issues/7812 is not yet fixed, the IDE doesn't know if we set the PublicSign
       flag. As a result, all design-time builds will think we're real-signing, which causes semantics to get all screwed up.
       The workaround for now is, for design-time builds only, to pass the DelaySign flag since that's "good enough". This
       must be done in a target versus conditioning on BuildingProject, since BuildingProject itself is correctly set in a
       target. -->
  <Target Name="FixPublicSignFlagForDesignTimeBuilds" BeforeTargets="CoreCompile" Condition="'$(PublicSign)' == 'true'">
    <PropertyGroup Condition="'$(BuildingProject)' == 'false'">
      <!-- Turn off PublicSign, because leaving both to true will make the Csc task unhappy -->
      <PublicSign>false</PublicSign>
      <DelaySign>true</DelaySign>
    </PropertyGroup>
  </Target>

   <!--
    Workaround https://github.com/Microsoft/msbuild/issues/1490 (lack of support for public-signing satellites) by
    delay-signing satellite assemblies when main assembly is public-signed.
   -->
  <Target Name="PrepareToDelaySignSatelliteAssemblies" BeforeTargets="GenerateSatelliteAssemblies">
    <PropertyGroup>
      <_DelaySignMainAssembly>$(DelaySign)</_DelaySignMainAssembly>
      <DelaySign Condition="'$(PublicSign)' == 'true'">true</DelaySign>
    </PropertyGroup>
  </Target>
  <Target Name="CleanupAfterDelaySigningSatelliteAssemblies" AfterTargets="GenerateSatelliteAssemblies">
    <PropertyGroup>
      <DelaySign>$(_DelaySignMainAssembly)</DelaySign>
    </PropertyGroup>
  </Target>

</Project>