<?xml version="1.0" encoding="utf-8"?>
<!--
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-->
<root>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	
	<data name="Project" xml:space="preserve">
		<value>An MSBuild project.</value>
	</data>
	<data name="Project.DefaultTargets">
		<value>Optional semi-colon separated list of one or more targets that will be built if no targets are otherwise specified</value>
	</data>
	<data name="Project.InitialTargets" xml:space="preserve">
		<value>Optional semi-colon separated list of targets that should always be built before any other targets</value>
	</data>
	<data name="Project.Sdk" xml:space="preserve">
		<value>Optional string describing the MSBuild SDK(s) this project should be built with</value>
	</data>
	<data name="Project.ToolsVersion" xml:space="preserve">
		<value>Optional string describing the toolset version this project should normally be built with</value>
	</data>
	<data name="Project.TreatAsLocalProperty" xml:space="preserve">
		<value>Command-line properties to ignore in this file and its imports.</value>
	</data>
	<data name="Project.xmlns">
		<value>XML namespace, must be "http://schemas.microsoft.com/developer/msbuild/2003".</value>
	</data>

	<data name="Target">
		<value>Groups tasks into a section of the build process</value>
	</data>
	<data name="Target.Name">
		<value>Name of the target</value>
	</data>
	<data name="Target.DependsOnTargets">
		<value>Optional semi-colon separated list of targets that should be run before this target</value>
	</data>
	<data name="Target.Inputs">
		<value>Optional semi-colon separated list of files that form inputs into this target. Their timestamps will be compared with the timestamps of files in Outputs to determine whether the Target is up to date</value>
	</data>
	<data name="Target.Outputs">
		<value>Optional semi-colon separated list of files that form outputs into this target. Their timestamps will be compared with the timestamps of files in Inputs to determine whether the Target is up to date</value>
	</data>
	<data name="Target.Condition">
		<value>Optional expression evaluated to determine whether the Target and the targets it depends on should be run</value>
	</data>
	<data name="Target.KeepDuplicateOutputs">
		<value>Optional expression evaluated to determine whether duplicate items in the Target's Returns should be removed before returning them. The default is not to eliminate duplicates.</value>
	</data>
	<data name="Target.Returns">
		<value>Optional expression evaluated to determine which items generated by the target should be returned by the target. If there are no Returns attributes on Targets in the file, the Outputs attributes are used instead for this purpose.</value>
	</data>
	<data name="Target.BeforeTargets">
		<value>Optional semi-colon separated list of targets that this target should run before.</value>
	</data>
	<data name="Target.AfterTargets">
		<value>Optional semi-colon separated list of targets that this target should run before.</value>
	</data>
	<data name="Target.Label">
		<value>Optional expression. Used to identify or order system and user elements.</value>
	</data>
	
	<data name="ProjectExtensions">
		<value>Optional section used by MSBuild hosts, that may contain arbitrary XML content that is ignored by MSBuild itself.</value>
	</data>
	
	<data name="Item.Include">
		<value>Semi-colon separated list of files (wildcards are allowed) or other item names to include in this item list</value>
	</data>
	<data name="Item.Condition">
		<value>Optional expression evaluated to determine whether the items should be evaluated</value>
	</data>
	<data name="Item.Exclude">
		<value>Semi-colon separated list of files (wildcards are allowed) or other item names to exclude from the Include list</value>
	</data>
	<data name="Item.Remove">
		<value>Semi-colon separated list of files (wildcards are allowed) or other item names to remove from the existing list contents</value>
	</data>
	<data name="Item.Update">
		<value>Semi-colon separated list of files (wildcards are allowed) or other item names to be updated with the metadata from contained in this xml element</value>
	</data>
	<data name="Item.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>
	<data name="Item.KeepDuplicates">
		<value>Whether to add items even if they match the identity and metadata of an existing item</value>
	</data>
	<data name="Item.KeepMetadata">
		<value>Metadata from source items to keep on target items</value>
	</data>
	<data name="Item.RemoveMetadata">
		<value>Metadata from source items to omit from target items</value>
	</data>

	<data name="Item.Include.ParameterizedFiles">
		<value>Semi-colon separated list of {0} (wildcards are allowed) or other item references to include in this item list</value>
	</data>
	<data name="Item.Exclude.ParameterizedFiles">
		<value>Semi-colon separated list of {0} (wildcards are allowed) or other item references to exclude from the Include list</value>
	</data>
	<data name="Item.Remove.ParameterizedFiles">
		<value>Semi-colon separated list of {0} (wildcards are allowed) or other item references to remove from the existing list contents</value>
	</data>
	<data name="Item.Update.ParameterizedFiles">
		<value>Semi-colon separated list of {0} (wildcards are allowed) or other item references to be updated with the metadata from contained in this xml element</value>
	</data>
	<data name="Item.Include.Parameterized">
		<value>Semi-colon separated list of {0} or other item references to include in this item list</value>
	</data>
	<data name="Item.Exclude.Parameterized">
		<value>Semi-colon separated list of {0} or other item references to exclude from the Include list</value>
	</data>
	<data name="Item.Remove.Parameterized">
		<value>Semi-colon separated list of {0} or other item references to remove from the existing list contents</value>
	</data>
	<data name="Item.Update.Parameterized">
		<value>Semi-colon separated list of {0} or other item references to be updated with the metadata from contained in this xml element</value>
	</data>
		<data name="Item.Include.ParameterizedSingle">
		<value>Single {0} to include in this item list</value>
	</data>
	<data name="Item.Exclude.ParameterizedSingle">
		<value>A {0} to exclude from the Include list</value>
	</data>
	<data name="Item.Remove.ParameterizedSingle">
		<value>A {0} to remove from the existing list contents</value>
	</data>
	<data name="Item.Update.ParameterizedSingle">
		<value>A {0} to be updated with the metadata from contained in this xml element</value>
	</data>

	<data name="Property.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>
	<data name="Property.Condition">
		<value>Optional expression evaluated to determine whether the property should be evaluated</value>
	</data>
	
	<data name="PropertyGroup">
		<value>Groups property definitions</value>
	</data>
	<data name="PropertyGroup.Condition">
		<value>Optional expression evaluated to determine whether the PropertyGroup should be used</value>
	</data>
	<data name="PropertyGroup.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>

	<data name="ImportGroup">
		<value>Groups import definitions</value>
	</data>
	<data name="ImportGroup.Condition">
		<value>Optional expression evaluated to determine whether the ImportGroup should be used</value>
	</data>
	<data name="ImportGroup.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>

	<data name="ItemGroup">
		<value>Groups item definitions</value>
	</data>
	<data name="ItemGroup.Condition">
		<value>Optional expression evaluated to determine whether the ItemGroup should be used</value>
	</data>
	<data name="ItemGroup.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>

	<data name="ItemDefinitionGroup">
		<value>Groups item metadata definitions</value>
	</data>
	<data name="ItemDefinitionGroup.Condition">
		<value>Optional expression evaluated to determine whether the ItemDefinitionGroup should be used</value>
	</data>
	<data name="ItemDefinitionGroup.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>
	
	<data name="Choose">
		<value>Groups When and Otherwise elements</value>
	</data>
	<data name="Choose.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>
	
	<data name="When">
		<value>Groups PropertyGroup and/or ItemGroup elements</value>
	</data>
	<data name="When.Condition">
		<value>Optional expression evaluated to determine whether the child PropertyGroups and/or ItemGroups should be used</value>
	</data>

	<data name="Otherwise">
		<value>Groups PropertyGroup and/or ItemGroup elements that are used if no Conditions on sibling When elements evaluate to true</value>
	</data>

	<data name="OnError">
		<value>Specifies targets to execute in the event of a recoverable error</value>
	</data>
	<data name="OnError.Condition">
		<value>Optional expression evaluated to determine whether the targets should be executed</value>
	</data>
	<data name="OnError.ExecuteTargets">
		<value>Semi-colon separated list of targets to execute</value>
	</data>
	<data name="OnError.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>
	
	<data name="UsingTask">
		<value>Defines the assembly containing a task's implementation, or contains the implementation itself.</value>
	</data>
	<data name="UsingTask.Condition">
		<value>Optional expression evaluated to determine whether the declaration should be evaluated</value>
	</data>
	<data name="UsingTask.AssemblyName">
		<value>Optional name of assembly containing the task. Either AssemblyName or AssemblyFile must be used</value>
	</data>
	<data name="UsingTask.AssemblyFile">
		<value>Optional path to assembly containing the task. Either AssemblyName or AssemblyFile must be used</value>
	</data>
	<data name="UsingTask.TaskName">
		<value>Name of task class in the assembly</value>
	</data>
	<data name="UsingTask.TaskFactory">
		<value>Name of the task factory class in the assembly</value>
	</data>
	<data name="UsingTask.Architecture">
		<value>Defines the architecture of the task host that this task should be run in.  Currently supported values:  x86, x64, CurrentArchitecture, and * (any).  If Architecture is not specified, either the task will be run within the MSBuild process, or the task host will be launched using the architecture of the parent MSBuild process</value>
	</data>
	<data name="UsingTask.Runtime">
		<value>Defines the .NET runtime version of the task host that this task should be run in.  Currently supported values:  CLR2, CLR4, CurrentRuntime, and * (any).  If Runtime is not specified, either the task will be run within the MSBuild process, or the task host will be launched using the runtime of the parent MSBuild process</value>
	</data>
	
	<data name="ParameterGroup">
		<value>Groups parameters that are part of an inline task definition</value>
	</data>
	
	<data name="Parameter">
		<value>Input or output parameter for the task</value>
	</data>
	<data name="Parameter.ParameterType">
		<value>Optional string. Type of the task parameter. Defaults to string type.</value>
	</data>
	<data name="Parameter.Output">
		<value>Optional bool. Whether this task parameter can be retrieved as an output. Defaults to false.</value>
	</data>
	<data name="Parameter.Required">
		<value>Optional bool. Whether this task parameter is required to be passed a value. Defaults to false.</value>
	</data>
	
	<data name="UsingTaskBody">
		<value>Contains the inline task implementation. Content is opaque to MSBuild.</value>
	</data>
	<data name="UsingTaskBody.Evaluate">
		<value>Whether the body should have properties expanded before use. Defaults to false.</value>
	</data>
	
	<data name="Import">
		<value>Declares that the contents of another project file should be inserted at this location</value>
	</data>
	<data name="Import.Condition">
		<value>Optional expression evaluated to determine whether the import should occur</value>
	</data>
	<data name="Import.Project">
		<value>Project file to import</value>
	</data>
	<data name="Import.Label">
		<value>Optional expression. Used to identify or order system and user elements</value>
	</data>
	<data name="Import.Sdk">
		<value>Name of the SDK which contains the project file to import</value>
	</data>
	<data name="Import.Version">
		<value>Optional expression used to specify the version of the SDK referenced by this import</value>
	</data>
	<data name="Import.MinimumVersion">
		<value>Optional expression used to specify the minimum SDK version required by the referring import</value>
	</data>
	
	<data name="Output">
		<value>Optional element specifying a specific task output to be gathered</value>
	</data>
	<data name="Output.TaskParameter">
		<value>Task parameter to gather. Matches the name of a .NET Property on the task class that has an [Output] attribute</value>
	</data>
	<data name="Output.ItemName">
		<value>Optional name of an item list to put the gathered outputs into. Either ItemName or PropertyName must be specified</value>
	</data>
	<data name="Output.PropertyName">
		<value>Optional name of a property to put the gathered output into. Either PropertyName or ItemName must be specified</value>
	</data>
	<data name="Output.Condition">
		<value>Optional expression evaluated to determine whether the output should be gathered</value>
	</data>
	
	<data name="Task">
		<value></value>
	</data>
	<data name="Task.Condition">
		<value>Optional expression evaluated to determine whether the task should be executed</value>
	</data>
	<data name="Task.ContinueOnError">
		<value>Optional boolean indicating whether a recoverable task error should be ignored. Default false</value>
	</data>
	<data name="Task.Architecture">
		<value>Defines the bitness of the task if it must be run specifically in a 32bit or 64bit process. If not specified, it will run with the bitness of the build process.  If there are multiple tasks defined in UsingTask with the same name but with different Architecture attribute values, the value of the Architecture attribute specified here will be used to match and select the correct task</value>
	</data>
	<data name="Task.Runtime">
		<value>Defines the .NET runtime of the task. This must be specified if the task must run on a specific version of the .NET runtime. If not specified, the task will run on the runtime being used by the build process. If there are multiple tasks defined in UsingTask with the same name but with different Runtime attribute values, the value of the Runtime attribute specified here will be used to match and select the correct task</value>
	</data>
	<data name="Task.Parameter">
		<value>A paramater to pass to the task</value>
	</data>
	
	<data name="Metadata.Condition">
		<value>Optional expression evaluated to determine whether the metadata should applied to the item</value>
	</data>
	
	<data name="Metadata">
		<value>Arbitrary key-value pairs on the item</value>
	</data>
	<data name="Item">
		<value>Creates, updates or removes items and their metadata</value>
	</data>
	<data name="TaskBody">
		<value>Data to be passed to the task factory</value>
	</data>
	<data name="Property">
		<value>Sets a property value</value>
	</data>

	<data name="ItemDefinition">
		<value>The item kind to which to apply metadata</value>
	</data>
</root>
